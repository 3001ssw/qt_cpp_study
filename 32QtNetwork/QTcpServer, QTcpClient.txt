표준 네트워크 상에서는 Server, Client 개발 시 Thread로 구성을 해야함
쓰레드가 많아질수록 개발과 유지보수가 힘들어짐

Qt Network에서는 Signal/Slot 방식으로 처리

- .pro에 추가
qmake
QT += network

cmake
find_package(Qt6 COMPONENTS Network REQUIRED)
target_link_libraries(mytarget PRIVATE Qt6::Network)


- 클래스
TCP/UDP 프로토콜
QTcpSocket, QTcpServer, QUdpSocket

High 레벨 네트워크 응용 어플레이케이션 구현 클래스
QNetworkAccessManager
QNetworkRequest
QNetworkReply



- QTcpSocket, QTcpServer 프로그램 동기화 함수
bool waitForConnected(int msecs) connect를 millisecond까지 동기
bool waitForDisconnected(int msecs) disconnect를 millisecond까지 동기
bool waitForBytesWritten(int msecs) 데이터를 전달할때까지 동기
bool waitForReadyRead(int msecs) 데이터를 읽을때까지 동기

- waitForConnected 예제
socket->connectToHost("127.0.0.1", 8888);
if (socket->waitForConnected())
	qDebug() << "connected";

- waitForDisconnected 예제
socket->disconnectFromHost();
if (socket->state() == QAbstractSocket::UnconnectedState)
{
	if (socket->waitForDisconnected())
		qDebug() << "Disconnected";
}